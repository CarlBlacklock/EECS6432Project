Kalman Estimator Proposal:
Define x_t as the prediction from the Kalman Estimator. 
x_t is a column vector of the following values [sql_cpu, web_worker_cpu, sql_memory, web_worker_memory]
Define u_t as the control inputs to the Kalman Estimator
u_t is a column vector of the following values [delta_sql, delta_web_work, delta_requests]
Using the notation that a matrix A of size m x n has m rows and n columns we have:
x_t is of size 4 x 1
u_t is of size 3 x 1
Thus we need to define a matrix B_t of size 4 x 3 to act as the control-input model
So the prediction of the Kalman Estimator is given by:
x_t = x_(t - 1) + B_t * u_t

How we use this Estimator:
For the basic diagram see lecture 15 (Model Based Engineering) slide 9
In words:
At some arbitrary time point we wish to determine what changes if any we need to make to the system.
Assume we have a goal of maintaining the cpu utilization of both types of containers under 50%.
Determining the current cpu utilization is an expensive process. So we attempt to estimate the future utilization as a relationship
between the current utilization and any changes in the environment. We model these changes by the change in the number of requests
and the number of containers (IE the values in u_t).
Thus our system does the following:
Send the vector u_t = [0, 0, delta_requests] to the estimator. (IE what will happen if we make no change in response to the changing workload)
Our estimator will give us an idea of what the utilization will be. IF the estimated utilization is above our set point we then send a series
of vectors such as u_t = [2, 2, delta_requests], u_t = [2, 1, delta_requests], u_t = [2, 0, delta_requests] and so on
Thus our system attempts to find the best change to make in order to keep utilization below the threshold, while making the smallest change
So if u_t = [2, 2, delta_requests], u_t = [2, 1, delta_requests] would both bring the utilization below the setpoint
We prefer to make the change u_t = [2, 1, delta_requests] IE adding as few new containers as possible
Note that for the sake of computational time we will probably need to limit the number of possible configurations we test
Thus the change may not be optimal but this is unaviodable

How we update:
Let our model sample the change in the number of requests every ten seconds. Every minute we compute the actual utilizations
We use these computed values to update the Kalman filters parameters as well as our model B_t.